{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ipcRenderer","window","require","SpeakerIcon","props","className","speaker","isSpeaking","width","height","src","avatarUrl","App","useState","speakers","setSpeakers","useEffect","send","on","event","data","currentRoom","s","users","forEach","u","roomPermissions","isSpeaker","creatorId","id","isMuted","activeSpeakerMap","muteMap","push","console","log","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAIMA,EAAcC,OAAOC,QAAQ,YAAYF,YAsD/C,SAASG,EAAYC,GACnB,OACE,qBAAKC,UAAWD,EAAME,QAAQC,WAAa,2BAA6B,OAAxE,SACE,qBAAKF,UAAU,UAAf,SACE,qBAAKG,MAAM,OAAOC,OAAO,OACvBJ,UAAWD,EAAME,QAAQC,WAAa,iBAAmB,GACzDG,IAAKN,EAAME,QAAQK,gBAYdC,MAtEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KA2Cb,OAzCAC,qBAAU,WACRhB,EAAYiB,KAAK,sBAAsB,GACvCjB,EAAYkB,GAAG,wBAAwB,SAACC,EAAOC,GAC7C,GAAIA,EAAKC,YAAa,CACpB,IAAIC,EAAI,GACRF,EAAKC,YAAYE,MAAMC,SAAQ,SAAAC,GACzBA,EAAEC,iBACAD,EAAEC,gBAAgBC,WAAaP,EAAKC,YAAYO,YAAcH,EAAEI,MAClEJ,EAAElB,YAAa,EACfkB,EAAEK,SAAU,EACRV,EAAKC,YAAYU,iBAAiBN,EAAEI,MACtCJ,EAAElB,YAAa,GAEba,EAAKC,YAAYW,QAAQP,EAAEI,MAC7BJ,EAAEK,SAAU,GAEdR,EAAEW,KAAKR,IAGLL,EAAKC,YAAYO,YAAcH,EAAEI,KACnCJ,EAAElB,YAAa,EACfkB,EAAEK,SAAU,EACRV,EAAKC,YAAYU,iBAAiBN,EAAEI,MACtCJ,EAAElB,YAAa,GAEba,EAAKC,YAAYW,QAAQP,EAAEI,MAC7BJ,EAAEK,SAAU,GAEdR,EAAEW,KAAKR,IAIXS,QAAQC,IAAIV,MAIdV,EAAYO,SAGf,IAGD,qBAAKjB,UAAU,MAAMG,MAAM,OAA3B,SACGM,GAAYA,EAASsB,KAAI,SAAC9B,GAAD,OACxB,cAACH,EAAD,CAAaG,QAASA,GAAcA,EAAQuB,UCxCrCQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bc92b591.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport { FiMicOff } from \"react-icons/fi\";\n\nconst ipcRenderer = window.require(\"electron\").ipcRenderer;\n\nfunction App() {\n  const [speakers, setSpeakers] = useState([]);\n  useEffect(() => {\n    ipcRenderer.send(\"@overlay/start_ipc\", true);\n    ipcRenderer.on(\"@overlay/overlayData\", (event, data) => {\n      if (data.currentRoom) {\n        let s = [];\n        data.currentRoom.users.forEach(u => {\n          if (u.roomPermissions) {\n            if (u.roomPermissions.isSpeaker || data.currentRoom.creatorId === u.id) {\n              u.isSpeaking = false;\n              u.isMuted = false;\n              if (data.currentRoom.activeSpeakerMap[u.id]) {\n                u.isSpeaking = true;\n              }\n              if (data.currentRoom.muteMap[u.id]) {\n                u.isMuted = true;\n              }\n              s.push(u);\n            }\n          } else {\n            if (data.currentRoom.creatorId === u.id) {\n              u.isSpeaking = false;\n              u.isMuted = false;\n              if (data.currentRoom.activeSpeakerMap[u.id]) {\n                u.isSpeaking = true;\n              }\n              if (data.currentRoom.muteMap[u.id]) {\n                u.isMuted = true;\n              }\n              s.push(u);\n            }\n          }\n\n          console.log(u);\n\n\n        });\n        setSpeakers(s);\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"App\" width=\"100%\">\n      {speakers && speakers.map((speaker) =>\n        <SpeakerIcon speaker={speaker} key={speaker.id} />\n      )}\n    </div>\n  );\n}\n\nfunction SpeakerIcon(props) {\n  return (\n    <div className={props.speaker.isSpeaking ? \"active-speaker-cont left\" : \"left\"}>\n      <div className=\"img-div\">\n        <img width=\"50px\" height=\"50px\"\n          className={props.speaker.isSpeaking ? \"active-speaker\" : \"\"}\n          src={props.speaker.avatarUrl} />\n        {/* {props.speaker.isMuted ?\n          <div className=\"speaker-muted\">\n            <FiMicOff />\n          </div>\n          : null} */}\n      </div>\n      {/* {props.speaker.isSpeaking ? <div className=\"name-div\"> <p>{props.speaker.displayName}</p> </div> : null} */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}